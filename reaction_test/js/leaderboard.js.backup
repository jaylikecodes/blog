/**
 * leaderboard.js - 순위표 관리 모듈 (GitHub Gist 동기화 기능 추가)
 */

// 저장소 관련 옵션
const STORAGE_METHOD = {
  INDEXEDDB: 'indexeddb',
  LOCALSTORAGE: 'localstorage',
  GIST: 'gist'
};

// 기본적으로 GitHub Gist 사용, 그레도 부족하면 다른 저장소 사용
let primaryStorageMethod = STORAGE_METHOD.GIST;
let fallbackStorageMethod = STORAGE_METHOD.LOCALSTORAGE;

// IndexedDB 지원 여부 확인
let indexedDBSupported = window.gameDB && window.gameDB.isIndexedDBSupported();
if (!indexedDBSupported) {
  fallbackStorageMethod = STORAGE_METHOD.LOCALSTORAGE;
}

// 스토리지 관련 상수
const LEADERBOARD_KEY = 'reaction_game_leaderboard';
const LEADERBOARD_LAST_SYNC_KEY = 'reaction_game_last_sync';
let GIST_ID = localStorage.getItem('reaction_game_gist_id') || ''; // 사용자 지정 Gist ID
const GIST_FILENAME = 'reaction_game_leaderboard.json';
const GITHUB_TOKEN_KEY = 'reaction_game_github_token'; // GitHub 토큰 저장 키
let GITHUB_TOKEN = localStorage.getItem(GITHUB_TOKEN_KEY) || ''; // GitHub 개인 액세스 토큰

// 순위표 관련 상수와 변수
const visibleRecords = 20; // 초기 표시 기록 수
const maxLeaderboardRank = 100; // 최대 순위 수
let isMoreRecordsVisible = false; // 추가 기록 표시 여부

// 현재 사용자 관련 변수
let currentUserId = null;
let leaderboardCache = []; // 캐시된 리더보드 데이터

// GitHub Gist 관련 변수
let lastSyncTime = 0; // 마지막 동기화 시간
let syncInProgress = false; // 동기화 진행 중 여부
let pendingChanges = false; // 동기화 대기 중인 변경 사항 존재 여부

// 첫 로드 시 데이터 마이그레이션 여부
let hasAttemptedMigration = false;

/**
 * GitHub Gist API 관련 함수
 */

// GitHub Gist에서 리더보드 데이터 가져오기
function fetchLeaderboardFromGist() {
  return new Promise((resolve, reject) => {
    // 이미 동기화 진행 중이면 공백 배열 반환
    if (syncInProgress) {
      resolve([]);
      return;
    }
    
    // Gist ID가 없으면 공백 배열 반환
    if (!GIST_ID) {
      resolve([]);
      return;
    }
    
    syncInProgress = true;
    
    // GitHub Gist API 호출
    const headers = {
      'Accept': 'application/vnd.github.v3+json'
    };
    
    // 토큰이 있으면 인증 헤더 추가
    if (GITHUB_TOKEN) {
      headers['Authorization'] = `token ${GITHUB_TOKEN}`;
    }
    
    fetch(`https://api.github.com/gists/${GIST_ID}`, {
      headers: headers
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Gist fetch failed: ${response.status} ${response.statusText}`);
        }
        return response.json();
      })
      .then(gistData => {
        syncInProgress = false;
        
        // 파일 데이터가 있는지 확인
        if (!gistData.files || !gistData.files[GIST_FILENAME]) {
          console.log('Gist exists but no leaderboard file found');
          resolve([]);
          return;
        }
        
        // Gist 데이터 파싱
        try {
          const content = gistData.files[GIST_FILENAME].content;
          const leaderboardData = JSON.parse(content);
          
          if (Array.isArray(leaderboardData)) {
            // 마지막 동기화 시간 업데이트
            lastSyncTime = Date.now();
            try {
              localStorage.setItem(LEADERBOARD_LAST_SYNC_KEY, lastSyncTime);
            } catch (e) {
              console.error('Error saving sync time:', e);
            }
            
            resolve(leaderboardData);
          } else {
            console.error('Invalid leaderboard data format from Gist');
            resolve([]);
          }
        } catch (error) {
          console.error('Error parsing Gist content:', error);
          resolve([]);
        }
      })
      .catch(error => {
        syncInProgress = false;
        console.error('Error fetching from Gist:', error);
        resolve([]);
      });
  });
}

// GitHub Gist에 리더보드 데이터 저장
function saveLeaderboardToGist(leaderboard) {
  return new Promise((resolve, reject) => {
    // 이미 동기화 진행 중이면 대기 플래그 설정
    if (syncInProgress) {
      pendingChanges = true;
      resolve(false);
      return;
    }
    
    syncInProgress = true;
    
    // Gist ID 없으면 새로 생성
    if (!GIST_ID) {
      console.log('No Gist ID available, falling back to localStorage');
      syncInProgress = false;
      resolve(false);
      return;
    }
    
    // Gist 데이터 형식 준비
    const gistData = {
      files: {}
    };
    
    gistData.files[GIST_FILENAME] = {
      content: JSON.stringify(leaderboard)
    };
    
    // 헤더 준비
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.github.v3+json'
    };
    
    // 토큰이 있으면 인증 헤더 추가
    if (GITHUB_TOKEN) {
      headers['Authorization'] = `token ${GITHUB_TOKEN}`;
    }
    
    // GitHub Gist API 호출
    fetch(`https://api.github.com/gists/${GIST_ID}`, {
      method: 'PATCH',
      headers: headers,
      body: JSON.stringify(gistData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Gist update failed: ${response.status} ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      syncInProgress = false;
      
      // 업데이트 성공, 마지막 동기화 시간 저장
      lastSyncTime = Date.now();
      try {
        localStorage.setItem(LEADERBOARD_LAST_SYNC_KEY, lastSyncTime);
      } catch (e) {
        console.error('Error saving sync time:', e);
      }
      
      // 대기 중인 변경 사항 있으면 다시 실행
      if (pendingChanges) {
        pendingChanges = false;
        // 재귀적 호출 대신 다음 스케줄링에서 처리
      }
      
      resolve(true);
    })
    .catch(error => {
      syncInProgress = false;
      console.error('Error updating Gist:', error);
      resolve(false);
    });
  });
}

// 리더보드 데이터 합치기 (Gist와 로컬 데이터 병합)
function mergeLeaderboardData(localData, gistData) {
  // 두 데이터 합치기
  const mergedData = [...localData];
  
  // Gist 데이터 추가
  gistData.forEach(gistRecord => {
    const existingIndex = mergedData.findIndex(r => r.user_id === gistRecord.user_id);
    
    if (existingIndex >= 0) {
      // 기존 사용자 데이터가 있는 경우, 더 나은 점수 선택
      if (gistRecord.score < mergedData[existingIndex].score) {
        mergedData[existingIndex] = gistRecord;
      }
    } else {
      // 새 사용자 데이터 추가
      mergedData.push(gistRecord);
    }
  });
  
  // 점수별 정렬 (오름차순)
  mergedData.sort((a, b) => a.score - b.score);
  
  // 최대 100개까지 유지
  if (mergedData.length > maxLeaderboardRank) {
    return mergedData.slice(0, maxLeaderboardRank);
  }
  
  return mergedData;
}
/**
 * 로컬 스토리지에서 순위표 데이터 가져오기
 * @return {Array} 순위표 레코드 배열
 */
function getLeaderboardFromStorage() {
  const leaderboardData = localStorage.getItem(LEADERBOARD_KEY);
  if (leaderboardData) {
    try {
      return JSON.parse(leaderboardData);
    } catch (e) {
      console.error('Error parsing leaderboard data:', e);
      return [];
    }
  }
  return [];
}

/**
 * 로컬 스토리지에 순위표 데이터 저장
 * @param {Array} leaderboard 순위표 레코드 배열
 */
function saveLeaderboardToStorage(leaderboard) {
  try {
    localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(leaderboard));
  } catch (e) {
    console.error('Error saving leaderboard data:', e);
  }
}

/**
 * 순위표 데이터 불러오기 (GitHub Gist, IndexedDB 또는 localStorage 사용)
 * @param {Function} callback 데이터를 받아 처리할 콜백 함수
 */
function fetchLeaderboard(callback) {
  // 로딩 표시
  const loadingEl = document.getElementById('leaderboard-loading');
  if (loadingEl) loadingEl.classList.remove('hidden');

  // 저장소 선택
  if (primaryStorageMethod === STORAGE_METHOD.GIST) {
    // GitHub Gist에서 데이터 불러오기 시도
    fetchLeaderboardFromGist()
      .then(gistData => {
        // 저장소에서 로컬 데이터 불러오기
        let localData = [];
        
        if (fallbackStorageMethod === STORAGE_METHOD.INDEXEDDB && indexedDBSupported) {
          // IndexedDB에서 데이터 불러오기
          return window.gameDB.fetchLeaderboard()
            .then(dbData => {
              // Gist 데이터와 로컬 데이터 병합
              const mergedData = mergeLeaderboardData(dbData, gistData);
              
              // 병합된 데이터가 있으면 다시 저장
              if (mergedData.length > 0) {
                // 로컬에 저장
                window.gameDB.replaceAllRecords(mergedData);
                
                // 서버에 업데이트
                if (GIST_ID && gistData.length !== mergedData.length) {
                  saveLeaderboardToGist(mergedData);
                }
              }
              
              return mergedData;
            });
        } else {
          // localStorage 사용
          localData = getLeaderboardFromStorage();
          
          // 데이터 병합
          const mergedData = mergeLeaderboardData(localData, gistData);
          
          // 병합된 데이터가 있으면 다시 저장
          if (mergedData.length > 0) {
            saveLeaderboardToStorage(mergedData);
            
            // 서버에 업데이트
            if (GIST_ID && gistData.length !== mergedData.length) {
              saveLeaderboardToGist(mergedData);
            }
          }
          
          return mergedData;
        }
      })
      .then(finalData => {
        if (loadingEl) loadingEl.classList.add('hidden');
        leaderboardCache = finalData;
        if (callback) callback(finalData);
      })
      .catch(error => {
        console.error('Error in Gist fetch sequence:', error);
        // 오류 발생 시 로컬 저장소로 대체
        fetchFromLocalStorage();
      });
    return;
  }
  
  // IndexedDB 사용 (기본 저장소가 Gist가 아닐 경우)
  if (fallbackStorageMethod === STORAGE_METHOD.INDEXEDDB && indexedDBSupported) {
    window.gameDB.fetchLeaderboard()
      .then(leaderboard => {
        if (loadingEl) loadingEl.classList.add('hidden');
        leaderboardCache = leaderboard;
        
        // 첫 로드 시 데이터 마이그레이션 시도
        if (!hasAttemptedMigration && leaderboard.length === 0) {
          console.log('No data in IndexedDB, checking localStorage for migration');
          const localData = getLeaderboardFromStorage();
          if (localData && localData.length > 0) {
            console.log('Migrating data from localStorage to IndexedDB');
            window.gameDB.migrateFromFirebase(localData)
              .then(() => {
                return window.gameDB.fetchLeaderboard();
              })
              .then(migratedData => {
                leaderboardCache = migratedData;
                if (callback) callback(migratedData);
              })
              .catch(error => {
                console.error('Migration error:', error);
                if (callback) callback(leaderboard);
              });
          } else {
            if (callback) callback(leaderboard);
          }
          hasAttemptedMigration = true;
        } else {
          if (callback) callback(leaderboard);
        }
      })
      .catch(error => {
        console.error('Error fetching leaderboard from IndexedDB:', error);
        // 오류 발생 시 localStorage로 대체
        fetchFromLocalStorage();
      });
    return;
  }
  
  // localStorage 사용 (fallback)
  fetchFromLocalStorage();
  
  // localStorage에서 데이터 가져오는 내부 함수
  function fetchFromLocalStorage() {
    setTimeout(() => {
      if (loadingEl) loadingEl.classList.add('hidden');
      const leaderboard = getLeaderboardFromStorage();
      leaderboardCache = leaderboard;
      if (callback) callback(leaderboard);
    }, 300);
  }
}

/**
 * 새 점수 저장 (GitHub Gist, IndexedDB 또는 localStorage)
 * @param {Object} record 저장할 레코드 객체
 * @param {Function} callback 저장 후 호출할 콜백 함수
 */
function saveRecord(record, callback) {
  // 저장소 선택
  if (primaryStorageMethod === STORAGE_METHOD.GIST) {
    // 현재 데이터 불러오기
    fetchLeaderboard((leaderboard) => {
      // 이미 있는 사용자 ID인지 확인
      const existingRecordIndex = leaderboard.findIndex(r => r.user_id === record.user_id);
      
      let updated = false;
      if (existingRecordIndex >= 0) {
        // 기존 기록이 있는 경우, 새 기록이 더 좋으면 업데이트
        if (record.score < leaderboard[existingRecordIndex].score) {
          leaderboard[existingRecordIndex] = record;
          updated = true;
        }
      } else {
        // 새 기록 추가
        leaderboard.push(record);
        updated = true;
      }
      
      if (!updated) {
        // 변경 사항이 없으면 즉시 완료
        if (callback) callback(true);
        return;
      }
      
      // 점수별 정렬 (오름차순)
      leaderboard.sort((a, b) => a.score - b.score);
      
      // 최대 100개까지 유지
      if (leaderboard.length > maxLeaderboardRank) {
        leaderboard = leaderboard.slice(0, maxLeaderboardRank);
      }
      
      // 로컬 저장소에 저장
      if (fallbackStorageMethod === STORAGE_METHOD.INDEXEDDB && indexedDBSupported) {
        // IndexedDB에 저장
        window.gameDB.replaceAllRecords(leaderboard)
          .then(() => {
            // Gist에 업데이트
            if (GIST_ID) {
              return saveLeaderboardToGist(leaderboard);
            }
            return true;
          })
          .then(() => {
            if (callback) callback(true);
          })
          .catch(error => {
            console.error('Error saving to IndexedDB:', error);
            // localStorage에 대체 저장
            saveLeaderboardToStorage(leaderboard);
            if (callback) callback(false);
          });
      } else {
        // localStorage에 저장
        saveLeaderboardToStorage(leaderboard);
        
        // GitHub Gist에 저장
        if (GIST_ID) {
          saveLeaderboardToGist(leaderboard)
            .then(() => {
              if (callback) callback(true);
            })
            .catch(error => {
              console.error('Error saving to Gist:', error);
              if (callback) callback(false);
            });
        } else {
          if (callback) callback(true);
        }
      }
    });
    return;
  }
  
  // IndexedDB 사용 (기본 저장소가 Gist가 아닐 경우)
  if (fallbackStorageMethod === STORAGE_METHOD.INDEXEDDB && indexedDBSupported) {
    window.gameDB.saveRecord(record)
      .then(() => {
        if (callback) callback(true);
      })
      .catch(error => {
        console.error('Error saving record to IndexedDB:', error);
        saveToLocalStorage(record, callback);
      });
    return;
  }
  
  // localStorage 사용 (fallback)
  saveToLocalStorage(record, callback);
  
  // localStorage에 저장하는 내부 함수
  function saveToLocalStorage(record, callback) {
    // 기존 데이터 불러오기
    let leaderboard = getLeaderboardFromStorage();
    
    // 데이터가 없으면 새 배열 생성
    if (!leaderboard || !Array.isArray(leaderboard)) {
      leaderboard = [];
    }
    
    // 이미 있는 사용자 ID인지 확인
    const existingRecordIndex = leaderboard.findIndex(r => r.user_id === record.user_id);
    
    if (existingRecordIndex >= 0) {
      // 기존 기록이 있는 경우, 새 기록이 더 좋으면 업데이트
      if (record.score < leaderboard[existingRecordIndex].score) {
        leaderboard[existingRecordIndex] = record;
      }
    } else {
      // 새 기록 추가
      leaderboard.push(record);
    }
    
    // 점수별 정렬 (오름차순)
    leaderboard.sort((a, b) => a.score - b.score);
    
    // 최대 100개까지 유지
    if (leaderboard.length > maxLeaderboardRank) {
      leaderboard = leaderboard.slice(0, maxLeaderboardRank);
    }
    
    // 저장
    saveLeaderboardToStorage(leaderboard);
    
    if (callback) callback(true);
  }
}

/**
 * 새로운 점수를 순위표에 추가하는 함수
 * @param {string} playerName 플레이어 이름
 * @param {number} score 반응 속도 점수(ms)
 * @return {Promise<number>} 새로 추가된 기록의 순위 (1부터 시작)
 */
function addScoreToLeaderboard(playerName, score) {
  return new Promise((resolve) => {
    // 사용자 ID가 없으면 새로 생성
    if (!currentUserId) {
      currentUserId = generateUserId();
      console.log('New user ID generated:', currentUserId);
    }

    // 새 기록 객체 생성
    const newRecord = {
      player_name: playerName,
      score: score,
      datetime: new Date().toISOString(),
      user_id: currentUserId
    };

    // 기록 저장
    saveRecord(newRecord, () => {
      // 순위표 갱신 및 표시
      fetchLeaderboard((leaderboard) => {
        // 사용자 기록의 순위 찾기
        const rank = leaderboard.findIndex(r => r.user_id === currentUserId) + 1;
        displayLeaderboard(isMoreRecordsVisible, leaderboard);
        resolve(rank);
      });
    });
  });
}

/**
 * 순위표 화면에 표시하는 함수
 * @param {boolean} showMore 추가 기록 표시 여부
 * @param {Array} leaderboardData 선택적으로 사용할 순위표 데이터
 */
function displayLeaderboard(showMore = false, leaderboardData = null) {
  const leaderboardBody = document.getElementById('leaderboard-body');
  const showMoreBtn = document.getElementById('show-more-btn');
  
  if (!leaderboardBody) {
    console.error('Leaderboard table body element not found');
    return;
  }
  
  // 리더보드 데이터 설정 (외부에서 제공 또는 캐시 사용)
  const leaderboard = leaderboardData || leaderboardCache;
  
  // 순위표 초기화
  leaderboardBody.innerHTML = '';
  
  // 추가 기록 표시 여부 저장
  isMoreRecordsVisible = showMore;
  
  // 표시할 기록 수 결정
  const recordsToShow = showMore ? leaderboard.length : Math.min(visibleRecords, leaderboard.length);
  
  // 기록이 없는 경우
  if (!leaderboard || leaderboard.length === 0) {
    const emptyRow = document.createElement('tr');
    emptyRow.innerHTML = `<td colspan="4">${window.gameTranslations.getText('no-records')}</td>`;
    leaderboardBody.appendChild(emptyRow);
    if (showMoreBtn) showMoreBtn.style.display = 'none';
    return;
  }
  
  // 표시할 레코드 수 결정
  const recordsCount = Math.min(recordsToShow, leaderboard.length);
  
  // 더 보기 버튼 상태 결정
  if (showMoreBtn) {
    if (leaderboard.length > visibleRecords && !showMore) {
      showMoreBtn.style.display = 'block';
    } else {
      showMoreBtn.style.display = 'none';
    }
  }
  
  // 기록 출력
  for (let i = 0; i < recordsCount; i++) {
    const record = leaderboard[i];
    const rank = i + 1;
    
    const row = document.createElement('tr');
    
    // 현재 사용자 기록인지 확인
    const isCurrentUser = currentUserId && record.user_id === currentUserId;
    
    // 상위 3등은 특별하게 표시
    if (rank <= 3) {
      row.classList.add('top-three');
      if (rank === 1) row.classList.add('first-place');
      else if (rank === 2) row.classList.add('second-place');
      else if (rank === 3) row.classList.add('third-place');
    }
    
    // 현재 사용자 기록은 특별하게 표시
    if (isCurrentUser) {
      row.classList.add('current-user-score');
    }
    
    // 날짜 포맷팅
    const recordDate = new Date(record.datetime);
    const formattedDate = recordDate.toLocaleDateString() + ' ' + 
                          recordDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    // 플레이어 이름 표시 (현재 플레이어라면 색상 강조)
    const playerNameDisplay = isCurrentUser ? 
      `<span class="current-user-name">${record.player_name}</span>` : 
      `<span>${record.player_name}</span>`;
    
    // 행 내용 생성
    row.innerHTML = `
      <td>${rank}</td>
      <td>${playerNameDisplay}</td>
      <td>${record.score}${window.gameTranslations.getText('ms')}</td>
      <td>${formattedDate}</td>
    `;
    
    leaderboardBody.appendChild(row);
  }
  
  // 내보내기/가져오기 버튼 추가
  if (!document.getElementById('leaderboard-export-btn')) {
    addExportImportButtons();
  }
}

/**
 * 내보내기/가져오기 버튼 추가
 */
function addExportImportButtons() {
  const leaderboardContainer = document.querySelector('.leaderboard-container');
  if (!leaderboardContainer) return;
  
  const buttonsContainer = document.createElement('div');
  buttonsContainer.className = 'leaderboard-buttons mt-3';
  
  // 내보내기 버튼
  const exportBtn = document.createElement('button');
  exportBtn.id = 'leaderboard-export-btn';
  exportBtn.className = 'btn btn-secondary btn-sm mr-2';
  exportBtn.innerText = window.gameTranslations.getText('export') || 'Export';
  exportBtn.onclick = window.gameDB.exportLeaderboard;
  
  // 가져오기 버튼
  const importBtn = document.createElement('button');
  importBtn.id = 'leaderboard-import-btn';
  importBtn.className = 'btn btn-secondary btn-sm';
  importBtn.innerText = window.gameTranslations.getText('import') || 'Import';
  
  // 가져오기 파일 입력
  const fileInput = document.createElement('input');
  fileInput.type = 'file';
  fileInput.id = 'leaderboard-file-input';
  fileInput.accept = '.json';
  fileInput.style.display = 'none';
  
  // 파일 선택 이벤트
  fileInput.onchange = (e) => {
    if (e.target.files.length > 0) {
      const file = e.target.files[0];
      window.gameDB.importLeaderboard(file)
        .then(() => {
          alert(window.gameTranslations.getText('import-success') || 'Leaderboard imported successfully');
          // 순위표 다시 로드
          fetchLeaderboard((data) => {
            displayLeaderboard(isMoreRecordsVisible, data);
          });
        })
        .catch(error => {
          alert(window.gameTranslations.getText('import-error') || 'Error importing leaderboard: ' + error);
        });
    }
  };
  
  // 가져오기 버튼 클릭 시 파일 선택 대화상자 표시
  importBtn.onclick = () => {
    fileInput.click();
  };
  
  // 요소 추가
  buttonsContainer.appendChild(exportBtn);
  buttonsContainer.appendChild(importBtn);
  buttonsContainer.appendChild(fileInput);
  
  // 더 보기 버튼 앞에 삽입
  const showMoreBtn = document.getElementById('show-more-btn');
  if (showMoreBtn && showMoreBtn.parentNode) {
    showMoreBtn.parentNode.insertBefore(buttonsContainer, showMoreBtn);
  } else {
    leaderboardContainer.appendChild(buttonsContainer);
  }
}

/**
 * 사용자 ID 생성 함수
 * @return {string} 새 사용자 ID
 */
function generateUserId() {
  return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

/**
 * 순위표 관련 이벤트 설정
 */
function setupLeaderboardEvents() {
  const showMoreBtn = document.getElementById('show-more-btn');
  if (showMoreBtn) {
    showMoreBtn.addEventListener('click', () => {
      displayLeaderboard(true);
    });
  }
}

/**
 * 모듈 초기화
 */
function initLeaderboard() {
  // 현재 사용자 ID 확인
  try {
    currentUserId = localStorage.getItem('currentUserId');
    if (!currentUserId) {
      currentUserId = generateUserId();
      localStorage.setItem('currentUserId', currentUserId);
    }
    
    // 마지막 동기화 시간 가져오기
    const lastSync = localStorage.getItem(LEADERBOARD_LAST_SYNC_KEY);
    if (lastSync) {
      lastSyncTime = parseInt(lastSync, 10);
    }
  } catch (e) {
    console.error('Error accessing localStorage:', e);
    currentUserId = generateUserId();
  }
  
  // GitHub Gist 초기화
  if (primaryStorageMethod === STORAGE_METHOD.GIST) {
    // Gist ID가 없는 경우 새로 생성해야 하지만 이 예제에서는 생략
    if (!GIST_ID) {
      console.warn('No Gist ID provided. Please set GIST_ID to use GitHub Gist synchronization.');
      // 사용자가 발급한 Gist ID를 사용해야 합니다.
      // 생성 로직은 생략하고 사용자가 직접 설정하도록 합니다.
    }
  }
  
  // 초기 데이터 로드 및 표시
  fetchLeaderboard((data) => {
    displayLeaderboard(false, data);
  });
  
  // 정기적으로 데이터 새로고침
  setInterval(() => {
    // 현재 시간과 마지막 동기화 시간 차이 확인 (5분 이상)
    const now = Date.now();
    const fiveMinutes = 5 * 60 * 1000;
    const shouldSync = primaryStorageMethod === STORAGE_METHOD.GIST && 
                      GIST_ID && 
                      (now - lastSyncTime > fiveMinutes);
    
    // Gist 동기화가 필요하면 동기화 실행
    if (shouldSync && !syncInProgress) {
      console.log('Syncing with GitHub Gist...');
      lastSyncTime = now;
      try {
        localStorage.setItem(LEADERBOARD_LAST_SYNC_KEY, lastSyncTime);
      } catch (e) {
        console.error('Error saving sync time:', e);
      }
    }
    
    // 데이터 갱신
    fetchLeaderboard((data) => {
      // 캐시된 데이터와 비교하여 변경 사항이 있을 때만 업데이트
      if (JSON.stringify(data) !== JSON.stringify(leaderboardCache)) {
        displayLeaderboard(isMoreRecordsVisible, data);
      }
    });
  }, 30000); // 30초마다 업데이트
}

// 모듈 내보내기
window.gameLeaderboard = {
  addScoreToLeaderboard,
  displayLeaderboard,
  setupLeaderboardEvents,
  initLeaderboard,
  getCurrentUserId: () => currentUserId,
  exportLeaderboard: () => window.gameDB.exportLeaderboard(),
  importLeaderboard: (file) => window.gameDB.importLeaderboard(file),
  
  // GitHub Gist 관련 추가 기능
  setGistId: (gistId) => {
    if (gistId && gistId.trim() !== '') {
      // GIST_ID 저장
      GIST_ID = gistId.trim();
      localStorage.setItem('reaction_game_gist_id', GIST_ID);
      console.log('GitHub Gist ID set:', GIST_ID);
      return true;
    }
    return false;
  },
  
  setGithubToken: (token) => {
    if (token && token.trim() !== '') {
      GITHUB_TOKEN = token.trim();
      localStorage.setItem(GITHUB_TOKEN_KEY, GITHUB_TOKEN);
      console.log('GitHub token set successfully');
      return true;
    }
    return false;
  },
  
  syncWithGist: () => {
    if (!GIST_ID) {
      console.warn('No Gist ID provided. Please set a Gist ID first.');
      return Promise.reject(new Error('No Gist ID provided'));
    }
    
    return new Promise((resolve, reject) => {
      fetchLeaderboardFromGist()
        .then(gistData => {
          if (!gistData || gistData.length === 0) {
            // Gist에 데이터가 없으면 현재 데이터 업로드
            return saveLeaderboardToGist(leaderboardCache);
          } else {
            // 데이터가 있으면 병합
            const mergedData = mergeLeaderboardData(leaderboardCache, gistData);
            leaderboardCache = mergedData;
            
            // 새로 디스플레이
            displayLeaderboard(isMoreRecordsVisible, mergedData);
            
            // 업데이트된 데이터를 Gist에 저장
            return saveLeaderboardToGist(mergedData);
          }
        })
        .then(() => {
          console.log('Gist sync completed successfully');
          resolve(true);
        })
        .catch(error => {
          console.error('Gist sync failed:', error);
          reject(error);
        });
    });
  },
  
  // 저장소 타입 설정
  setStorageMethod: (method) => {
    if (method === 'gist') {
      primaryStorageMethod = STORAGE_METHOD.GIST;
      console.log('Storage method set to GitHub Gist');
      return true;
    } else if (method === 'indexeddb' && indexedDBSupported) {
      primaryStorageMethod = STORAGE_METHOD.INDEXEDDB;
      console.log('Storage method set to IndexedDB');
      return true;
    } else if (method === 'localstorage') {
      primaryStorageMethod = STORAGE_METHOD.LOCALSTORAGE;
      console.log('Storage method set to localStorage');
      return true;
    }
    return false;
  }
};
